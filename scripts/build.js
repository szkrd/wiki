/* global find:false, mkdir:false, rm:false*/
require('shelljs/global');
const dedent = require('dedent');
const fs = require('fs');
const path = require('path');

const tocDir = './toc';
const tocFile = `${tocDir}/README.md`;
const prefersMdTitle = false;

// get first h1 from md file
function getMdTitle (s) {
  let m = s.trim().replace(/[\r\n].*/, '').match(/# (.*)/);
  return m && m.length === 2 ? m[1] : null;
}

// get list of tags from the end of the md file
function getMdTags (s) {
  let lines = s.trim().replace(/\r/g, '\n').replace(/\n+/g, '\n').split('\n');
  let tags = (lines.pop() || '')
    .split(',')
    .map(item =>
      item.trim()
        .toLowerCase()
        .replace(/[^\w]/g, '')
        .replace(/^\[([^\]]*)]$/, '$1'))
    .sort();
  tags = tags.map(tag => tag);
  return tags.length ? tags : ['undefined'];
}

// async promisified reader
function readFile (fileName) {
  return new Promise((resolve, reject) =>
    fs.readFile(fileName, 'utf8', (err, contents) =>
      err ? reject(err) : resolve({
        fileName, contents, tags: getMdTags(contents), title: getMdTitle(contents) })));
}

// async promisified writer
function writeFile (fileName, contents) {
  return new Promise((resolve, reject) =>
    fs.writeFile(fileName, contents, (err) => err ? reject(err) : resolve())
  );
}

// sync save toc file
function saveToc (tagMap) {
  let tagList = Object.keys(tagMap)
    .map(tag => `[${tag}](./${tag}.md)<sup>${tagMap[tag].length}</sup>`)
    .join(',\n');
  dedent`
  # Tags

  ${tagList}
  
  ---
  
  Generated by \`npm run build\` at ${new Date()}

  `.to(tocFile);
}

// async bulk save of each individual tag file
function bulkSaveTags (tagMap, results) {
  return Object.keys(tagMap).map(tag => {
    let files = tagMap[tag];
    let ul = files.map(fn => {
      let niceName = prefersMdTitle ? (results.find(result => result.fileName === fn) || {}).title : '';
      let name = path.basename(`../${fn}`).replace(/.md$/, '').replace(/[_-]/g, ' ');
      return `* [${niceName || name}](../${fn})`
    }).join('\n');
    return writeFile(`${tocDir}/${tag}.md`, dedent`
      # ${tag}

      ${ul}
    `);
  });
}

// ---

let fns = find('src').filter(fn => fn.match(/\.md$/));
let bulkRead = fns.map(fn => readFile(fn));

rm('-rf', tocDir);
mkdir(tocDir);
Promise.all(bulkRead).then(results => {
  let allTags = results.reduce((acc, result) => {
    acc.push(...result.tags);
    return acc;
  }, []).sort();

  let tagMap = allTags.reduce((acc, tag) => {
    acc[tag] = [];
    return acc;
  }, {});

  results.forEach(result => {
    let tags = result.tags;
    tags.forEach(tag => {
      tagMap[tag].push(result.fileName);
    })

  });
  saveToc(tagMap);
  return Promise.all(bulkSaveTags(tagMap, results));
});
